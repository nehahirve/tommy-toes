{"version":3,"sources":["Utils.js","components/Timer.js","components/About.js","components/Backdrop.js","alarm.wav","work.mp3","App.js","reportWebVitals.js","index.js"],"names":["msToHuman","ms","minutes","Math","floor","seconds","toString","padStart","join","rgbStringToRgbObject","c1","r","slice","split","g","b","createGradient","c2","gradient","i","push","map","color","round","Display","styled","button","props","onABreak","Timer","time","active","toggleActive","useState","buttonText","setButtonText","handleHover","className","onMouseEnter","onFocus","onMouseLeave","e","target","blur","onBlur","console","log","onClick","Title","a","About","href","colours","gradientWork","gradientBreak","Wrapper","div","ripeness","Backdrop","input","children","duration","alarm","Audio","alarmSFX","volume","work","workSFX","Toggle","App","setTime","setActive","setOnABreak","appVisible","setAppVisible","useEffect","timer","play","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab5bc9bc.chunk.js","sourcesContent":["const msToHuman = ms => {\n  const minutes = Math.floor((ms / 1000 / 60) % 60)\n  const seconds = Math.floor((ms / 1000) % 60)\n  return [\n    minutes.toString().padStart(2, '0'),\n    seconds.toString().padStart(2, '0')\n  ].join(' : ')\n}\n\nexport { msToHuman }\n\nfunction rgbStringToRgbObject(c1) {\n  c1 = c1.slice(4, -1).split(',')\n  return {\n    r: +c1[0],\n    g: +c1[1],\n    b: +c1[2]\n  }\n}\n\nexport function createGradient(c1, c2) {\n  c1 = rgbStringToRgbObject(c1)\n  c2 = rgbStringToRgbObject(c2)\n  let gradient = []\n  for (let i = 0; i < 255; i++) {\n    let r = c1.r + (i * (c2.r - c1.r)) / 255\n    let g = c1.g + (i * (c2.g - c1.g)) / 255\n    let b = c1.b + (i * (c2.b - c1.b)) / 255\n    gradient.push({ r, g, b })\n  }\n  return gradient.map(color => {\n    return `rgb(${Math.round(color.r)}, ${Math.round(color.g)}, ${Math.round(\n      color.b\n    )})`\n  })\n}\n\nexport function mapToGradient(input, ms) {\n  const outputStart = 1\n  const outputEnd = 255\n  const inputStart = 0\n  const inputEnd = ms\n  const slope = (outputEnd - outputStart) / (inputEnd - inputStart)\n  return outputStart + slope * (input - inputStart)\n}\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { msToHuman } from '../Utils'\nimport 'animate.css'\n\nconst Display = styled.button`\n  width: 25rem;\n  font-size: 6rem;\n  border: 6px solid black;\n  border-radius: 999px;\n  color: ${props => (props.onABreak ? 'white' : 'black')};\n  background: ${props => (props.onABreak ? 'black' : 'none')};\n  padding-top: 0.25rem;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background: black;\n    color: white;\n    cursor: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='20px' height='20px'%3E%3Ccircle cx='50' cy='50' r='50' fill='white'/%3E%3C/svg%3E\"),\n      auto;\n  }\n`\n\nconst Timer = ({ time, active, toggleActive, onABreak }) => {\n  const [buttonText, setButtonText] = useState(null)\n\n  const handleHover = () => {\n    if (active) setButtonText('PAUSE')\n    else setButtonText('START')\n    if (time === 0 && onABreak) setButtonText('RESET')\n    if (time === 0 && !onABreak) setButtonText('BREAK')\n  }\n\n  return (\n    <main>\n      <Display\n        className={\n          time === 0\n            ? 'animate__animated animate__infinite animate__wobble'\n            : null\n        }\n        onMouseEnter={handleHover}\n        onFocus={handleHover}\n        onMouseLeave={e => {\n          e.target.blur()\n          setButtonText(null)\n        }}\n        onBlur={() => {\n          console.log('hey')\n          setButtonText(null)\n        }}\n        onClick={e => toggleActive(e)}\n        onABreak={onABreak}\n      >\n        {buttonText || msToHuman(time)}\n      </Display>\n    </main>\n  )\n}\n\nexport default Timer\n","import styled from 'styled-components'\n\nconst Title = styled.a`\n  text-decoration: none;\n  cursor: pointer;\n  background-image: linear-gradient(120deg, black, black);\n  background-repeat: no-repeat;\n  background-position: 0 88%;\n  background-size: 100% 0.1rem;\n  transition: background-size 0.25s ease-in;\n\n  &:hover,\n  &:focus {\n    cursor: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='20px' height='20px'%3E%3Ccircle cx='50' cy='50' r='50' fill='white'/%3E%3C/svg%3E\"),\n      auto;\n    background-size: 100% 70%;\n    color: white;\n  }\n`\n\nconst About = () => {\n  return (\n    <main>\n      <h1>\n        <Title href='https://github.com/nehahirve/tommy-toes'>Tommy Toe</Title>\n      </h1>\n      <p>\n        is a minimalist pomodoro timer. It works. No fancy features here,\n        because I had more important work to do. Just like you do.\n      </p>\n    </main>\n  )\n}\n\nexport default About\n","import styled from 'styled-components'\nimport { createGradient, mapToGradient } from '../Utils'\n\nconst colours = { raw: 'rgb(136, 157, 2)', ripe: 'rgb(202, 61, 0)' }\nconst gradientWork = createGradient(colours.ripe, colours.raw)\nconst gradientBreak = createGradient(colours.raw, colours.ripe)\n\nconst Wrapper = styled.div`\n  background: ${props => props.ripeness};\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='20px' height='20px'%3E%3Ccircle cx='50' cy='50' r='50'/%3E%3C/svg%3E\"),\n    auto;\n`\n\nconst Backdrop = ({ time, children, duration, onABreak }) => {\n  const gradient = onABreak ? gradientBreak : gradientWork\n  const ripeness = gradient[Math.floor(mapToGradient(time, duration)) - 1]\n\n  return <Wrapper ripeness={ripeness}>{children}</Wrapper>\n}\n\nexport default Backdrop\n","export default __webpack_public_path__ + \"static/media/alarm.0b403865.wav\";","export default __webpack_public_path__ + \"static/media/work.4b5d5306.mp3\";","import { useState, useEffect } from 'react'\nimport Timer from './components/Timer'\nimport About from './components/About'\nimport Backdrop from './components/Backdrop'\nimport styled from 'styled-components'\n\nimport alarmSFX from './alarm.wav'\nimport workSFX from './work.mp3'\nconst alarm = new Audio(alarmSFX)\nalarm.volume = 0.6\n\nconst work = new Audio(workSFX)\n\nconst duration = 1000 * 6\nconst BREAK_DURATION = 1000 * 4\n\nconst Toggle = styled.button`\n  position: absolute;\n  background: none;\n  right: 3rem;\n  top: 3rem;\n  font-family: 'Agrandir';\n  font-weight: 400;\n  font-size: 1.5rem;\n  background-image: linear-gradient(120deg, black, black);\n  background-repeat: no-repeat;\n  background-position: 0 88%;\n  background-size: 100% 0.1rem;\n  transition: background-size 0.25s ease-in;\n  &:hover,\n  &:focus {\n    background-size: 100% 70%;\n    color: white;\n    cursor: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100' width='20px' height='20px'%3E%3Ccircle cx='50' cy='50' r='50' fill='white'/%3E%3C/svg%3E\"),\n      auto;\n  }\n`\n\nfunction App() {\n  const [time, setTime] = useState(duration)\n  const [active, setActive] = useState(false)\n  const [onABreak, setOnABreak] = useState(false)\n  const [appVisible, setAppVisible] = useState(true)\n\n  const toggleActive = e => {\n    if (e) e.target.blur()\n    setActive(!active)\n  }\n\n  useEffect(() => {\n    if (active && time === 0 && !onABreak) alarm.play()\n    if (active && time === 0 && onABreak) work.play()\n    let timer\n    if (active) {\n      timer =\n        time > 0 &&\n        setInterval(() => {\n          setTime(time - 1000)\n          console.log('countdown')\n        }, 1000)\n    } else if (time === 0 && !onABreak) {\n      toggleActive()\n      setOnABreak(!onABreak)\n      setTime(BREAK_DURATION)\n    } else if (time === 0 && onABreak) {\n      setOnABreak(!onABreak)\n      setActive(false)\n      setTime(duration)\n    } else if (timer) {\n      clearInterval(timer)\n    }\n    return () => {\n      if (timer) clearInterval(timer)\n    }\n  }, [time, active])\n\n  return (\n    <Backdrop onABreak={onABreak} time={time} duration={duration}>\n      <Toggle onClick={() => setAppVisible(!appVisible)}>\n        {appVisible ? 'About' : 'X'}\n      </Toggle>\n      {appVisible && (\n        <Timer\n          onABreak={onABreak}\n          active={active}\n          time={time}\n          toggleActive={toggleActive}\n        />\n      )}\n      {!appVisible && <About />}\n    </Backdrop>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}