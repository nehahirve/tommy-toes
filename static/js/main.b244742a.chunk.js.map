{"version":3,"sources":["Utils.js","components/Timer.js","alarm.wav","App.js","reportWebVitals.js","index.js"],"names":["msToHuman","ms","minutes","Math","floor","seconds","toString","padStart","join","Display","styled","button","Timer","time","active","toggleActive","useState","buttonText","setButtonText","onMouseEnter","onMouseLeave","onClick","alarm","Audio","alarmSFX","Backdrop","div","h2","App","setTime","setActive","useEffect","timer","play","setInterval","console","log","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAAMA,EAAY,SAAAC,GAChB,IAAMC,EAAUC,KAAKC,MAAOH,EAAK,IAAO,GAAM,IACxCI,EAAUF,KAAKC,MAAOH,EAAK,IAAQ,IACzC,MAAO,CACLC,EAAQI,WAAWC,SAAS,EAAG,KAC/BF,EAAQC,WAAWC,SAAS,EAAG,MAC/BC,KAAK,Q,iBCFHC,EAAUC,IAAOC,OAAV,qPAoCEC,EAtBD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aAAmB,EACZC,mBAAS,MADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAShD,OACE,+BACE,cAACT,EAAD,CACEU,aATc,WACND,EAARJ,EAAsB,OACP,MACN,IAATD,GAAYK,EAAc,UAO1BE,aAAc,kBAAMF,EAAc,OAClCG,QAASN,EAHX,SAKGE,GAAcjB,EAAUa,QClClB,MAA0B,kCCMnCS,EAAQ,IAAIC,MAAMC,GAElBC,EAAWf,IAAOgB,IAAV,oLAUChB,IAAOiB,GAAV,iKA+CGC,MAtCf,WAAgB,IAAD,EACWZ,mBAAS,KADpB,mBACNH,EADM,KACAgB,EADA,OAEeb,oBAAS,GAFxB,mBAENF,EAFM,KAEEgB,EAFF,KA6Bb,OArBAC,qBAAU,WAER,IAAIC,EAcJ,OAfIlB,GAAmB,IAATD,GAAYS,EAAMW,OAE5BnB,EACFkB,EACEnB,EAAO,GACPqB,aAAY,WACVL,EAAQhB,EAAO,KACfsB,QAAQC,IAAI,eACX,KACa,IAATvB,GACTiB,GAAU,GACVD,EAAQ,MACCG,GACTK,cAAcL,GAET,WACDA,GAAOK,cAAcL,MAE1B,CAACnB,EAAMC,IAGR,cAACW,EAAD,UAEE,cAAC,EAAD,CAAOX,OAAQA,EAAQD,KAAMA,EAAME,aA5BlB,WACnBe,GAAWhB,SCpBAwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b244742a.chunk.js","sourcesContent":["const msToHuman = ms => {\n  const minutes = Math.floor((ms / 1000 / 60) % 60)\n  const seconds = Math.floor((ms / 1000) % 60)\n  return [\n    minutes.toString().padStart(2, '0'),\n    seconds.toString().padStart(2, '0')\n  ].join(' : ')\n}\n\nexport { msToHuman }\n\nfunction rgbStringToRgbObject(c1) {\n  c1 = c1.slice(4, -1).split(',')\n  return {\n    r: +c1[0],\n    g: +c1[1],\n    b: +c1[2]\n  }\n}\n\nfunction createGradient(c1, c2) {\n  c1 = rgbStringToRgbObject(c1)\n  c2 = rgbStringToRgbObject(c2)\n  let gradient = []\n  for (let i = 0; i < 255; i++) {\n    let r = c1.r + (i * (c2.r - c1.r)) / 255\n    let g = c1.g + (i * (c2.g - c1.g)) / 255\n    let b = c1.b + (i * (c2.b - c1.b)) / 255\n    gradient.push({ r, g, b })\n  }\n  return gradient.map(color => {\n    return `rgb(${Math.round(color.r)}, ${Math.round(color.g)}, ${Math.round(\n      color.b\n    )})`\n  })\n}\n\nfunction mapToGradient(input) {\n  const outputStart = 1\n  const outputEnd = 255\n  const inputStart = 0\n  const inputEnd = 1500\n  const slope = (outputEnd - outputStart) / (inputEnd - inputStart)\n  return outputStart + slope * (input - inputStart)\n}\n","import { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { msToHuman } from '../Utils'\n\nconst Display = styled.button`\n  width: 25rem;\n  font-size: 6rem;\n  border: 6px solid black;\n  border-radius: 999px;\n  background: none;\n  padding-top: 0.25rem;\n  cursor: pointer;\n  &:hover {\n    background: black;\n    color: white;\n  }\n`\n\nconst Timer = ({ time, active, toggleActive }) => {\n  const [buttonText, setButtonText] = useState(null)\n\n  const handleHover = () => {\n    if (active) setButtonText('STOP')\n    else setButtonText('GO')\n    if (time === 0) setButtonText('RESET')\n  }\n\n  return (\n    <main>\n      <Display\n        onMouseEnter={handleHover}\n        onMouseLeave={() => setButtonText(null)}\n        onClick={toggleActive}\n      >\n        {buttonText || msToHuman(time)}\n      </Display>\n    </main>\n  )\n}\n\nexport default Timer\n","export default __webpack_public_path__ + \"static/media/alarm.0b403865.wav\";","import { useState, useEffect } from 'react'\nimport Timer from './components/Timer'\nimport About from './components/About'\nimport styled from 'styled-components'\n\nimport alarmSFX from './alarm.wav'\nconst alarm = new Audio(alarmSFX)\n\nconst Backdrop = styled.div`\n  background: #889d02;\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Toggle = styled.h2`\n  position: absolute;\n  right: 3rem;\n  top: 3rem;\n  font-family: 'Agrandir';\n  font-weight: 400;\n  text-decoration: underline;\n`\n\nfunction App() {\n  const [time, setTime] = useState(0.1 * 60 * 1000)\n  const [active, setActive] = useState(false)\n\n  const toggleActive = () => {\n    setActive(!active)\n  }\n\n  useEffect(() => {\n    if (active && time === 0) alarm.play()\n    let timer\n    if (active) {\n      timer =\n        time > 0 &&\n        setInterval(() => {\n          setTime(time - 1000)\n          console.log('countdown')\n        }, 1000)\n    } else if (time === 0) {\n      setActive(false)\n      setTime(0.1 * 60 * 1000)\n    } else if (timer) {\n      clearInterval(timer)\n    }\n    return () => {\n      if (timer) clearInterval(timer)\n    }\n  }, [time, active])\n\n  return (\n    <Backdrop>\n      {/* <Toggle onClick={() => toggleOverlay(!overlay)}>About</Toggle> */}\n      <Timer active={active} time={time} toggleActive={toggleActive} />\n      {/* <About /> */}\n    </Backdrop>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}